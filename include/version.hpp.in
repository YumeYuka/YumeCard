#ifndef VERSION_HPP
#define VERSION_HPP

#include <string>

// Define a namespace for version information consistent with main.cpp usage
namespace yumecard {
    namespace version {
        extern char const* const project_name;
        extern char const* const string; // PROJECT_VERSION
        extern char const* const major;
        extern char const* const minor;
        extern char const* const patch;
        extern char const* const build_date;
        extern char const* const build_commit; // You might need to get this from Git
        extern char const* const target_platform;
        extern char const* const target_arch;
        extern char const* const compiler;
        extern char const* const compiler_version;

        std::string full_string();
    } // namespace version
} // namespace yumecard

// CMake will replace these with actual values in the generated version.hpp
// However, the actual definitions will be in version.cpp
// For the generated version.hpp, these macros might not be needed if we rely on version.cpp
// But for completeness with the original structure, they are kept for CMake to populate if it does so.
#define PROJECT_NAME_STR          "@PROJECT_NAME@"
#define PROJECT_VERSION_STR       "@PROJECT_VERSION@"
#define PROJECT_VERSION_MAJOR_STR "@PROJECT_VERSION_MAJOR@"
#define PROJECT_VERSION_MINOR_STR "@PROJECT_VERSION_MINOR@"
#define PROJECT_VERSION_PATCH_STR "@PROJECT_VERSION_PATCH@"

#endif // VERSION_HPP