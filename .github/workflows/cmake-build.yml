name: CMake Build for Windows and Linux

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  VCPKG_ROOT: ${{ github.workspace }}/vcpkg

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        architecture: [x64] # Can be extended to x86, arm64 if needed and supported by vcpkg triplets
        include:
          - os: ubuntu-latest
            vcpkg_triplet: x64-linux-static
          - os: windows-latest
            vcpkg_triplet: x64-mingw-static # Or x64-windows-static if using MSVC

    runs-on: ${{ matrix.os }}

    env: # Add an env block at the job level for VCPKG_DEFAULT_TRIPLET
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.vcpkg_triplet }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: ${{ env.VCPKG_ROOT }}
          runVcpkgInstall: false # Changed to false

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build curl ca-certificates git tar zip unzip pkg-config
          cd ${{ github.workspace }}
          ${{ env.VCPKG_ROOT }}/vcpkg --verbose install --triplet ${{ env.VCPKG_DEFAULT_TRIPLET }}
        shell: bash

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          cd ${{ github.workspace }}
          $arguments = @(
            "--verbose",
            "install",
            "--triplet",
            "${{ env.VCPKG_DEFAULT_TRIPLET }}"
          )
          Start-Process -FilePath "${{ env.VCPKG_ROOT }}\vcpkg.exe" -ArgumentList $arguments -Wait -NoNewWindow
        shell: pwsh

      - name: Configure CMake (Linux)
        if: runner.os == 'Linux'
        run: |
          cmake -B ${{ github.workspace }}/build -S ${{ github.workspace }} \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake \
            -G "Ninja"
        shell: bash

      - name: Configure CMake (Windows)
        if: runner.os == 'Windows'
        run: |
          cmake -B ${{ github.workspace }}/build -S ${{ github.workspace }} `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake `
            -G "Ninja" # Or "MinGW Makefiles"
        shell: pwsh

      - name: Build (Linux)
        if: runner.os == 'Linux'
        run: cmake --build ${{ github.workspace }}/build --config Release
        shell: bash

      - name: Build (Windows)
        if: runner.os == 'Windows'
        run: cmake --build ${{ github.workspace }}/build --config Release
        shell: pwsh

    # Optional: Upload artifact (e.g., the executable)
    # - name: Upload Artifact
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: YumeCard-${{ matrix.os }}-${{ matrix.architecture }}
    #     path: ${{ github.workspace }}/build/YumeCard* # Adjust path and executable name as needed
