name: CMake Build for Windows and Linux

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  VCPKG_ROOT: ${{ github.workspace }}/vcpkg

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        architecture: [x64]
        include:
          - os: ubuntu-latest
            vcpkg_triplet: x64-linux
          - os: windows-latest
            vcpkg_triplet: x64-mingw-static

    runs-on: ${{ matrix.os }}

    env:
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.vcpkg_triplet }}
      VCPKG_FEATURE_FLAGS: manifests,registries,versions

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: false

      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: ${{ env.VCPKG_ROOT }}
          key: vcpkg-${{ matrix.vcpkg_triplet }}-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            vcpkg-${{ matrix.vcpkg_triplet }}-

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build curl ca-certificates git tar zip unzip pkg-config build-essential
        shell: bash

      - name: Install system dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install ninja
        shell: pwsh

      - name: Setup vcpkg (Linux)
        if: runner.os == 'Linux'
        run: |
          if [ ! -d "${{ env.VCPKG_ROOT }}" ]; then
            git clone https://github.com/Microsoft/vcpkg.git ${{ env.VCPKG_ROOT }}
          fi
          ${{ env.VCPKG_ROOT }}/bootstrap-vcpkg.sh
        shell: bash

      - name: Setup vcpkg (Windows)
        if: runner.os == 'Windows'
        run: |
          if (!(Test-Path "${{ env.VCPKG_ROOT }}")) {
            git clone https://github.com/Microsoft/vcpkg.git ${{ env.VCPKG_ROOT }}
          }
          & "${{ env.VCPKG_ROOT }}\bootstrap-vcpkg.bat"
        shell: pwsh

      - name: Install vcpkg packages (Linux)
        if: runner.os == 'Linux'
        run: |
          cd ${{ github.workspace }}
          ${{ env.VCPKG_ROOT }}/vcpkg install --triplet ${{ env.VCPKG_DEFAULT_TRIPLET }}
        shell: bash
        env:
          VCPKG_FORCE_SYSTEM_BINARIES: 1

      - name: Install vcpkg packages (Windows)
        if: runner.os == 'Windows'
        run: |
          cd ${{ github.workspace }}
          & "${{ env.VCPKG_ROOT }}\vcpkg.exe" install --triplet ${{ env.VCPKG_DEFAULT_TRIPLET }}
        shell: pwsh

      - name: Debug vcpkg installation (Linux)
        if: runner.os == 'Linux'
        run: |
          echo "VCPKG_ROOT: ${{ env.VCPKG_ROOT }}"
          echo "VCPKG_DEFAULT_TRIPLET: ${{ env.VCPKG_DEFAULT_TRIPLET }}"
          if [ -d "${{ env.VCPKG_ROOT }}/installed/" ]; then
            echo "=== Installed packages ==="
            ls -la "${{ env.VCPKG_ROOT }}/installed/"
            echo "=== Triplet directory ==="
            ls -la "${{ env.VCPKG_ROOT }}/installed/${{ env.VCPKG_DEFAULT_TRIPLET }}/" || echo "Triplet directory not found"
            echo "=== Share directory ==="
            ls -la "${{ env.VCPKG_ROOT }}/installed/${{ env.VCPKG_DEFAULT_TRIPLET }}/share/" || echo "Share directory not found"
            echo "=== CMake files ==="
            find "${{ env.VCPKG_ROOT }}/installed/${{ env.VCPKG_DEFAULT_TRIPLET }}/share/" -name "*curl*" -o -name "*CURL*" 2>/dev/null || echo "No CURL cmake files found"
            echo "=== vcpkg.json content ==="
            cat vcpkg.json || echo "No vcpkg.json found"
          else
            echo "No installed directory found"
          fi
        shell: bash

      - name: Debug vcpkg installation (Windows)
        if: runner.os == 'Windows'
        run: |
          Write-Host "VCPKG_ROOT: ${{ env.VCPKG_ROOT }}"
          Write-Host "VCPKG_DEFAULT_TRIPLET: ${{ env.VCPKG_DEFAULT_TRIPLET }}"
          if (Test-Path "${{ env.VCPKG_ROOT }}\installed\") {
            Write-Host "=== Installed packages ==="
            Get-ChildItem "${{ env.VCPKG_ROOT }}\installed\"
            Write-Host "=== Triplet directory ==="
            if (Test-Path "${{ env.VCPKG_ROOT }}\installed\${{ env.VCPKG_DEFAULT_TRIPLET }}\") {
              Get-ChildItem "${{ env.VCPKG_ROOT }}\installed\${{ env.VCPKG_DEFAULT_TRIPLET }}\"
            } else {
              Write-Host "Triplet directory not found"
            }
            Write-Host "=== vcpkg.json content ==="
            if (Test-Path "vcpkg.json") {
              Get-Content "vcpkg.json"
            } else {
              Write-Host "No vcpkg.json found"
            }
          } else {
            Write-Host "No installed directory found"
          }
        shell: pwsh

      - name: Configure CMake
        run: |
          cmake -B ${{ github.workspace }}/build -S ${{ github.workspace }} -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake -G "Ninja" -DVCPKG_TARGET_TRIPLET=${{ env.VCPKG_DEFAULT_TRIPLET }}
        env:
          VCPKG_FORCE_SYSTEM_BINARIES: 1

      - name: Build
        run: cmake --build ${{ github.workspace }}/build --config Release

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: YumeCard-${{ matrix.os }}-${{ matrix.architecture }}
          path: |
            ${{ github.workspace }}/build/YumeCard*
            ${{ github.workspace }}/build/*.exe
