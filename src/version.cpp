#include "version.hpp" // Generated by CMake from version.hpp.in

#include <iomanip> // For std::setw, std::setfill if formatting build_date
#include <sstream>

// These values are set by CMake during the build process.
// The actual strings are defined in CMakeLists.txt or passed as definitions.

namespace yumecard {
    namespace version {
        // These are defined by CMake. CMake will create a version.cpp or similar
        // or directly pass these as preprocessor definitions.
        // If CMake generates version.hpp directly with #defines, then this .cpp file
        // would define these extern const char* based on those #defines.

        // Example of how CMake might pass these (actual mechanism depends on CMakeLists.txt setup):
        // For example, if CMake generates a config.h with these defines:
        // #define VERSION_STRING "1.0.0"
        // #define BUILD_DATE_STR "2023-10-27"
        // etc.
        // Then this file would look like:
        // const char* const string = VERSION_STRING;
        // const char* const build_date = BUILD_DATE_STR;

        // For now, we assume CMake will link a separately compiled object or directly define these.
        // These are placeholders and will need to be correctly populated by the CMake build system.

        // Values from CMake (passed via add_definitions or target_compile_definitions in CMakeLists.txt)
        // Or, more commonly, version.hpp is generated by configure_file and contains #defines.
        // This .cpp file then provides the storage for the extern char* variables.

        char const* const project_name = PROJECT_NAME_STR;
        char const* const string       = PROJECT_VERSION_STR;
        char const* const major        = PROJECT_VERSION_MAJOR_STR;
        char const* const minor        = PROJECT_VERSION_MINOR_STR;
        char const* const patch        = PROJECT_VERSION_PATCH_STR;

        // These need to be populated by CMake. For example, by using execute_process to get git commit.
        char const* const build_date       = CONFIG_BUILD_DATE;
        char const* const build_commit     = CONFIG_GIT_COMMIT;
        char const* const target_platform  = CONFIG_TARGET_PLATFORM;
        char const* const target_arch      = CONFIG_TARGET_ARCH;
        char const* const compiler         = CONFIG_COMPILER_ID;
        char const* const compiler_version = CONFIG_COMPILER_VERSION;

        std::string full_string() {
            std::ostringstream oss;
            oss << project_name << " version " << string << " (Build: " << build_commit << " on "
                << build_date << ", " << target_platform << " " << target_arch
                << ", Compiler: " << compiler << " " << compiler_version << ")";
            return oss.str();
        }

    } // namespace version
} // namespace yumecard
